let Buffer = require('safe-buffer').Buffer
let VM = require('../src/index.js')

// create a new VM instance
let vm = new VM()

// vm.on('Operation', function (data) {
//   console.log(data.opcode.name)
// })

// Compiled Bytecode of a Smart Contract
// let code = '606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c6888fa1146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60007f24abdb5865df5079dcc5ac590ff6f01d5c16edbc5fab4e195d9febd1114503da600783026040518082815260200191505060405180910390a16007820290509190505600a165627a7a7230582040383f19d9f65246752244189b02f56e8d0980ed44e7a56c0b200458caad20bb0029'
let code = '608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ee580e5a14610046575b600080fd5b34801561005257600080fd5b506100ad600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610128565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ed5780820151818401526020810190506100d2565b50505050905090810190601f16801561011a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608190509190505600a165627a7a72305820deb3bea08c39bc19d4b4a50a510cb912ba3d98666101801605175b05ebd4a4380029'
// Encoded input data
let data = 'ee580e5a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002002537422532324e616d6525323225334125323235323832333436353033363625323225324325323243617465676f72792532322533412532323131303530322532322532432532324272616e6425323225334125323232363638332532322532432532324d616e75666163746f727925323225334125323244454c4c2532304368696e6125323225324325323253656c6c657225323225334125323232363136393730383834253232253243253232427579657225323225334125323231382532433138352532433631253243313639253232253243253232534b552532322533412532323337313731363238353339343925323225324325323245414e2532322533412532323030313233303038383334333625323225324325323250726963652532322533412532323133343925323225324325323243757272656e6379253232253341253232524d422532322532432532324465736372697074696f6e25323225334125323244656c6c2f25753632333425753543313425323055323431344825323025753445313325753445314125753745413725753636334525753739334125753536363825323032332e3825753832463125753542463825753735333525753831313125753543344625753545353525323049505325753741383425753846423925753638343625753937363225753637374625323225374430'

vm.runTrans({
  from: new Buffer('1CmqKHsdhqJhkoWm9w5ALJXTPemxL339ju'),
  to: new Buffer('1CmqKHsdhqJhkoWm9w5ALJXTPemxL339ju'),
  code: Buffer.from(code, 'hex'),
  data: Buffer.from(data, 'hex'),
  gasLimit: 6327,
  gasPrice: 0.001,
  amount: 1,
  message: 'Hello SEC!'
}, function (err, results) {
  // console.log(results)
  let finalString = results.Return.substring(128)
  let convertedString = Buffer.from(finalString, 'hex').toString('utf8')
  convertedString = unescape(convertedString)
  console.log(convertedString.replace(/0+$/g, ''))
  // console.log('gasUsed: ' + results.vmResults.gasUsed.toString())
  if (err) {
    console.log(err)
  }
})
